export const coding_chat = [
    {
        role: "user",
        content: "根据流程生成代码。",
    },
    {
        role: "assistant",
        content: "根据流程生成如下代码：\n```python\nfrom lab_modules import Pipette, Robot, MagRack, Heatershaker\n\npipette = Pipette()\nrobot = Robot()\nmagrack = MagRack()\nheater_shaker = Heatershaker()\n\n# Target sequence and parameters\nsequence = \"TACTATGG\"\ncycles = len(sequence)\nwash_repeats = 3  # Explore 2-5 washes\ndeprotection_wash_repeats = 2  # Explore 1-3 washes\nreaction_incubation_time = 20  # Minutes (explore 15-30)\ndeprotection_time = 20  # Minutes (explore 15-25)\n\n# Initial tube setup (magnetic beads in 'input-4')\nrobot.moveTubeGroup([\"work_1\"], [\"input-4\"], 1)\n\nfor cycle, base in enumerate(sequence, 1):\n    # Determine NTP source based on base\n    if base == \"A\":\n        ntp_src = \"input-20\"\n    elif base == \"T\":\n        ntp_src = \"input-21\"\n    elif base == \"C\":\n        ntp_src = \"input-22\"\n    elif base == \"G\":\n        ntp_src = \"input-23\"\n    \n    # --- Reaction Setup ---\n    # Add 5x reaction buffer (16 µL) + Tween-20 (8 µL) + NTP (4 µL) + TdT (4 µL) + water (48 µL)\n    pipette.move(\"work_1\", \"input-200\", 16)  # 5x buffer\n    pipette.move(\"work_1\", \"input-21\", 8)     # Tween-20 (1%)\n    pipette.move(\"work_1\", ntp_src, 4)        # NTP (thickened to 4 µL)\n    pipette.move(\"work_1\", \"input-7\", 4)      # TdT enzyme (thickened to 4 µL)\n    pipette.move(\"work_1\", \"input-3\", 48)     # Water\n    pipette.mix(\"work_1\")                     # Mix\n    \n    # Incubate in heatershaker\n    robot.moveTubeGroup([\"heatershaker_1\"], [\"work_1\"], 1)\n    heater_shaker.set_temp(30)\n    heater_shaker.start(reaction_incubation_time)\n    \n    # --- Magnetic Separation ---\n    robot.moveTubeGroup([\"magrack_1\"], [\"heatershaker_1\"], 1)\n    magrack.wait(10)  # 10-min separation\n    robot.moveTubeGroup([\"work_1\"], [\"magrack_1\"], 1)\n    pipette.move(\"output-1\", \"work_1\", 80)  # Remove supernatant\n    \n    # --- Wash Loop ---\n    for _ in range(wash_repeats):\n        pipette.move(\"work_1\", \"input-201\", 100)  # Wash buffer\n        pipette.mix(\"work_1\")\n        robot.moveTubeGroup([\"magrack_1\"], [\"work_1\"], 1)\n        magrack.wait(10)\n        robot.moveTubeGroup([\"work_1\"], [\"magrack_1\"], 1)\n        pipette.move(\"output-1\", \"work_1\", 100)\n    \n    # --- Deprotection ---\n    pipette.move(\"work_1\", \"input-202\", 50)  # Deprotection buffer\n    pipette.mix(\"work_1\")\n    robot.moveTubeGroup([\"heatershaker_1\"], [\"work_1\"], 1)\n    heater_shaker.set_temp(25)\n    heater_shaker.start(deprotection_time)\n    \n    # --- Post-Deprotection Wash ---\n    robot.moveTubeGroup([\"magrack_1\"], [\"heatershaker_1\"], 1)\n    magrack.wait(10)\n    robot.moveTubeGroup([\"work_1\"], [\"magrack_1\"], 1)\n    pipette.move(\"output-1\", \"work_1\", 50)\n    for _ in range(deprotection_wash_repeats):\n        pipette.move(\"work_1\", \"input-201\", 100)\n        pipette.mix(\"work_1\")\n        robot.moveTubeGroup([\"magrack_1\"], [\"work_1\"], 1)\n        magrack.wait(10)\n        robot.moveTubeGroup([\"work_1\"], [\"magrack_1\"], 1)\n        pipette.move(\"output-1\", \"work_1\", 100)\n\n# Final capping\nrobot.capTubeGroup([\"work_1\"])\n```\n# 以上是根据DNA合成工艺生成的代码。",
    }
]

export const coding_step = "子任务：生成产线代码";